# Redirect HTTP to HTTPS;
server {
    server_name _;
    return 301 https://$host$request_uri;
}

# The authentication server/proxy;
server {
    # HTTP authentication backend;
    set $auth_backend "http://127.0.0.1:6123";
    listen 443 ssl;
    server_name auth.example.com;

    ssl_certificate /etc/ssl/local/auth.example.chained.pem;
    ssl_certificate_key /etc/ssl/private/nginx.pem;

    # Proxy all the request to the backend;
    location / {
        proxy_cache off;
        proxy_pass $auth_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

# Webapp configuration.
# If you have a wildcard cert, you probably only need on section like this.
# Actually, if you have a wildcard cert, you probably _only_ need this section.
server {
    set $auth_backend "http://127.0.0.1:6123";
    listen 443 ssl;
    server_name webapp.example.com;

    ssl_certificate /etc/ssl/local/webapp.example.com.chained.pem;
    ssl_certificate_key /etc/ssl/private/nginx.pem;

    location / {
        proxy_cache off;
        proxy_pass $auth_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # The X-Accel-Redirect header sent from the auth backend will be caught by nginx and end up here
    location /reproxy {
        set $reproxy_url $upstream_http_x_reproxy_url;
        set $reproxy_method $upstream_http_x_reproxy_method;

        internal;
        resolver 192.168.1.1; # this is only needed if you use dns names in the routing config
        proxy_pass $reproxy_url;
        proxy_method $reproxy_method;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

}

